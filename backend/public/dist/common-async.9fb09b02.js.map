{"version":3,"sources":["src/services/utils/common-utils.ts","src/services/ant-design-pro/attendance.ts","src/services/ant-design-pro/meeting.ts","src/services/ant-design-pro/guest.ts","src/services/utils/antd-utils.ts"],"sourcesContent":["import { API_BASE_URL, PHOTO_BASE_URL } from '@/request-config';\r\nimport { AttendanceType } from '../ant-design-pro/attendance';\r\n\r\nexport const getAPIURL = (pathName: string) => {\r\n  return API_BASE_URL + '/' + pathName;\r\n};\r\n\r\nexport const getPhotoURL = (filePath: string) => {\r\n  return PHOTO_BASE_URL + '/' + filePath;\r\n};\r\n\r\nexport const buildCheckInURL = (baseURL: string, attendance: AttendanceType) => {\r\n  const blob = encodeURIComponent(btoa(attendance._id));\r\n  const blob0 = encodeURIComponent(btoa((attendance.guestId as any).idNumber));\r\n  return baseURL + '/' + blob0 + '/' + blob;\r\n}\r\n","// @ts-ignore\r\n/* eslnumber-disable */\r\nimport { request } from '@umijs/max';\r\nimport { SortOrder } from 'antd/es/table/numbererface';\r\n\r\nexport enum AttendanceStatus {\r\n  UNKNOWN = 0,\r\n  CHECKED_IN = 1,\r\n}\r\n\r\nexport const AttedanceStatusOptions = [\r\n  {\r\n    label: 'Chưa tham dự',\r\n    value: 0\r\n  },\r\n  {\r\n    label: 'Đã tham dự',\r\n    value: 1\r\n  },\r\n]\r\n\r\nexport type AttendanceType = {\r\n  _id: string;\r\n  meetingId: string;\r\n  guestId: string;\r\n  status: AttendanceStatus;\r\n  checkInTime: Date;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n};\r\n\r\n/** Get a list of attendances GET /attendances */\r\nexport function attendances(meetingId: string) {\r\n  return async (\r\n    params: {\r\n      pageSize?: number;\r\n      current?: number;\r\n      keyword?: string;\r\n    },\r\n    sort: Record<string, SortOrder>,\r\n    filter: Record<string, (string | number)[] | string | null>,\r\n  ) => {\r\n    filter = filter || {};\r\n    filter.meetingId = meetingId;\r\n\r\n    const queryParams: any = {\r\n      ...params,\r\n      ...filter,\r\n    };\r\n\r\n    if (sort) {\r\n      const sortEntry = Object.entries(sort)[0];\r\n      if (sortEntry) {\r\n        queryParams.sort = sortEntry[0];\r\n        queryParams.direction = sortEntry[1];\r\n      }\r\n    }\r\n\r\n    return request<{\r\n      data: AttendanceType[];\r\n      /** The total number of items in the list */\r\n      total?: number;\r\n      success?: boolean;\r\n    }>('/attendance', {\r\n      method: 'GET',\r\n      params: queryParams,\r\n    });\r\n  };\r\n}\r\n\r\n/** Get a single attendance GET /attendances/:id */\r\nexport async function getAttendance(id: string) {\r\n  const response = await request<{\r\n    data: AttendanceType;\r\n    success?: boolean;\r\n  }>(`/attendance/${id}`, {\r\n    method: 'GET',\r\n    params: {},\r\n  });\r\n\r\n  return response;\r\n}\r\n\r\n/** Update attendance PUT /attendances */\r\nexport async function updateAttendance(\r\n  data: { [key: string]: any },\r\n  options?: { [key: string]: any },\r\n) {\r\n  return request<{ success: boolean; data: AttendanceType }>(`/attendance/${data._id}`, {\r\n    data,\r\n    method: 'PUT',\r\n    ...(options || {}),\r\n  });\r\n}\r\n\r\n/** New attendance POST /attendances */\r\nexport async function addAttendance(\r\n  data: { [key: string]: any },\r\n  options?: { [key: string]: any },\r\n) {\r\n  return request<{ success: boolean; data: AttendanceType }>('/attendance', {\r\n    data,\r\n    method: 'POST',\r\n    ...(options || {}),\r\n  });\r\n}\r\n\r\n/** delete attendance DELETE /attendances */\r\nexport async function removeAttendances(data: { ids: string[] }, options?: { [key: string]: any }) {\r\n  return request<{ success: boolean; message: string }>('/attendance', {\r\n    data,\r\n    method: 'DELETE',\r\n    ...(options || {}),\r\n  });\r\n}\r\n","// @ts-ignore\r\n/* eslnumber-disable */\r\nimport { request } from '@umijs/max';\r\nimport { SortOrder } from 'antd/es/table/numbererface';\r\nimport { AttendanceType } from './attendance';\r\n\r\nexport type MeetingType = {\r\n  _id: string;\r\n  name: string;\r\n  time: Date;\r\n  duration: number;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n};\r\n\r\n/** Get a list of meetings GET /meetings */\r\nexport async function meetings(\r\n  params: {\r\n    pageSize?: number;\r\n    current?: number;\r\n    keyword?: string;\r\n  },\r\n  sort: Record<string, SortOrder>,\r\n  filter: Record<string, (string | number)[] | null>,\r\n) {\r\n  const queryParams: any = {\r\n    ...params,\r\n    ...filter,\r\n  };\r\n\r\n  if (sort) {\r\n    const sortEntry = Object.entries(sort)[0];\r\n    if (sortEntry) {\r\n      queryParams.sort = sortEntry[0];\r\n      queryParams.direction = sortEntry[1];\r\n    }\r\n  }\r\n\r\n  return request<{\r\n    data: MeetingType[];\r\n    /** The total number of items in the list */\r\n    total?: number;\r\n    success?: boolean;\r\n  }>('/meeting', {\r\n    method: 'GET',\r\n    params: queryParams,\r\n  });\r\n}\r\n\r\n/** Get a single meeting GET /meetings/:id */\r\nexport async function getMeeting(id: string) {\r\n  const response = await request<{\r\n    data: MeetingType;\r\n    success?: boolean;\r\n  }>(`/meeting/${id}`, {\r\n    method: 'GET',\r\n    params: {},\r\n  });\r\n\r\n  return response;\r\n}\r\n\r\n/** Get a single meeting GET /meetings/report/:id */\r\nexport async function getMeetingReport(id: string) {\r\n  const response = await request<{\r\n    data: { meeting: MeetingType; attendances: AttendanceType[] };\r\n    success?: boolean;\r\n  }>(`/meeting/report/${id}`, {\r\n    method: 'GET',\r\n    params: {},\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\n/** Update meeting PUT /meetings */\r\nexport async function updateMeeting(\r\n  data: { [key: string]: any },\r\n  options?: { [key: string]: any },\r\n) {\r\n  return request<{ success: boolean; data: MeetingType }>(`/meeting/${data._id}`, {\r\n    data,\r\n    method: 'PUT',\r\n    ...(options || {}),\r\n  });\r\n}\r\n\r\n/** New meeting POST /meetings */\r\nexport async function addMeeting(data: { [key: string]: any }, options?: { [key: string]: any }) {\r\n  return request<{ success: boolean; data: MeetingType }>('/meeting', {\r\n    data,\r\n    method: 'POST',\r\n    ...(options || {}),\r\n  });\r\n}\r\n\r\n/** delete meeting DELETE /meetings */\r\nexport async function removeMeetings(data: { ids: string[] }, options?: { [key: string]: any }) {\r\n  return request<{ success: boolean; message: string }>('/meeting', {\r\n    data,\r\n    method: 'DELETE',\r\n    ...(options || {}),\r\n  });\r\n}\r\n\r\nexport async function generateInviteSheet(id: string) {\r\n  const response = await request<{\r\n    data: { meeting: MeetingType; attendances: AttendanceType[] };\r\n    success?: boolean;\r\n  }>(`/meeting/generate/${id}`, {\r\n    method: 'GET',\r\n    params: {},\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function printQRSheet(id: string) {\r\n  const response = await request<{\r\n    data: { meeting: MeetingType; attendances: AttendanceType[] };\r\n    success?: boolean;\r\n  }>(`/meeting/print/${id}`, {\r\n    method: 'GET',\r\n    params: {},\r\n  });\r\n\r\n  return response.data;\r\n}\r\n\r\nexport async function getCheckInURL() {\r\n  const response = await request<string>('/meeting/checkin-url', {\r\n    method: 'GET',\r\n  });\r\n\r\n  return response;\r\n}\r\n","// @ts-ignore\r\n/* eslnumber-disable */\r\nimport { request } from '@umijs/max';\r\nimport { SortOrder } from 'antd/es/table/numbererface';\r\n\r\nexport type GuestType = {\r\n  _id: string;\r\n  idNumber: string;\r\n  phoneNumber: string;\r\n  email: string;\r\n  fullName: string;\r\n  office: string;\r\n  workplace: string;\r\n  createdAt?: Date;\r\n  updatedAt?: Date;\r\n};\r\n\r\n/** Get a list of guests GET /guests */\r\nexport async function guests(\r\n  params: {\r\n    pageSize?: number;\r\n    current?: number;\r\n    keyword?: string;\r\n  },\r\n  sort: Record<string, SortOrder>,\r\n  filter: Record<string, (string | number)[] | null>,\r\n) {\r\n  const queryParams: any = {\r\n    ...params,\r\n    ...filter,\r\n  };\r\n\r\n  if (sort) {\r\n    const sortEntry = Object.entries(sort)[0];\r\n    if (sortEntry) {\r\n      queryParams.sort = sortEntry[0];\r\n      queryParams.direction = sortEntry[1];\r\n    }\r\n  }\r\n\r\n  return request<{\r\n    data: GuestType[];\r\n    /** The total number of items in the list */\r\n    total?: number;\r\n    success?: boolean;\r\n  }>('/guest', {\r\n    method: 'GET',\r\n    params: queryParams,\r\n  });\r\n}\r\n\r\n/** Get a single guest GET /guests/:id */\r\nexport async function getGuest(id: string) {\r\n  const response = await request<{\r\n    data: GuestType;\r\n    success?: boolean;\r\n  }>(`/guest/${id}`, {\r\n    method: 'GET',\r\n    params: {},\r\n  });\r\n\r\n  return response;\r\n}\r\n\r\n/** Update guest PUT /guests */\r\nexport async function updateGuest(data: { [key: string]: any }, options?: { [key: string]: any }) {\r\n  return request<{ success: boolean; data: GuestType }>(`/guest/${data._id}`, {\r\n    data,\r\n    method: 'PUT',\r\n    ...(options || {}),\r\n  });\r\n}\r\n\r\n/** New guest POST /guests */\r\nexport async function addGuest(data: { [key: string]: any }, options?: { [key: string]: any }) {\r\n  return request<{ success: boolean; data: GuestType }>('/guest', {\r\n    data,\r\n    method: 'POST',\r\n    ...(options || {}),\r\n  });\r\n}\r\n\r\n/** delete guest DELETE /guests */\r\nexport async function removeGuests(data: { ids: string[] }, options?: { [key: string]: any }) {\r\n  return request<{ success: boolean; message: string }>('/guest', {\r\n    data,\r\n    method: 'DELETE',\r\n    ...(options || {}),\r\n  });\r\n}\r\n\r\nexport async function search(query: string, limit: number, options?: { [key: string]: any }) {\r\n  const response = await request<GuestType[]>('/guest/search', {\r\n    params: {      \r\n      q: query,      \r\n      c: limit,\r\n    },\r\n    method: 'GET',\r\n    ...(options || {}),\r\n  });\r\n\r\n  return response;\r\n}","import { ColumnsState } from '@ant-design/pro-components';\r\nimport { TablePaginationConfig } from 'antd';\r\n\r\nexport function tableColumnState(\r\n  key: string,\r\n  state: Record<string, ColumnsState>,\r\n  setState: Function,\r\n): any {\r\n  return {\r\n    value: state,\r\n    onChange: (map: Record<string, ColumnsState>) => {\r\n      if (JSON.stringify(map) !== JSON.stringify(state)) {\r\n        setState(map);\r\n        localStorage.setItem(key, JSON.stringify(map));\r\n      }\r\n    },\r\n    persistenceKey: key,\r\n    persistenceType: 'localStorage',\r\n  };\r\n}\r\n\r\nexport function paginationOption(storageKey: string, pageSizeOptions: number[]): TablePaginationConfig {\r\n  return {\r\n    pageSizeOptions,\r\n    showSizeChanger: true,\r\n    showQuickJumper: true,\r\n    defaultPageSize: parseInt(localStorage.getItem(storageKey) || pageSizeOptions[0].toString()),    \r\n    onShowSizeChange: (current: number, size: number) => {\r\n      localStorage.setItem(storageKey, size.toString());\r\n    },\r\n  }\r\n}\r\n\r\nexport function expandFormData(fields: Record<string, any>): Record<string, any> {\r\n  const result: Record<string, any> = {};\r\n\r\n  for (const [key, value] of Object.entries(fields)) {\r\n    const subKeys = key.split('.');\r\n    if (subKeys.length === 1) {\r\n      result[key] = value;\r\n      continue;\r\n    }\r\n\r\n    let subObj = result;\r\n    for (let i = 0; i < subKeys.length - 1; ++i) {\r\n      const subKey = subKeys[i];\r\n      if (!subObj[subKey]) {\r\n        subObj[subKey] = {};\r\n      }\r\n      subObj = subObj[subKey];\r\n    }\r\n\r\n    subObj[subKeys[subKeys.length - 1]] = value;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function flattenFormData(\r\n  obj?: Record<string, any>,\r\n  prefix: string = '',\r\n): Record<string, any> {\r\n  if (!obj) {\r\n    return {};\r\n  }\r\n\r\n  let flattened: Record<string, any> = {};\r\n  for (let key in obj) {\r\n    if (typeof obj[key] === 'object' && obj[key] !== null) {\r\n      Object.assign(flattened, flattenFormData(obj[key], prefix + key + '.'));\r\n    } else {\r\n      flattened[prefix + key] = obj[key];\r\n    }\r\n  }\r\n  return flattened;\r\n}\r\n\r\nexport function createConnectQuery(\r\n  current: number[],\r\n  update: number[],\r\n): Record<string, any> | undefined {\r\n  current = current || [];\r\n  update = update || [];\r\n\r\n  if (!current.length && !update.length) {\r\n    return undefined;\r\n  }\r\n\r\n  const result: Record<string, any> = {};\r\n  current = current.filter((id) => !update.includes(id));\r\n  if (current.length) {\r\n    result.disconnect = current.map((id) => ({ id }));\r\n  }\r\n\r\n  if (update.length) {\r\n    result.createOrConnect = {\r\n      product: {\r\n        connect: update.map((id) => ({ id })),\r\n        position: 0\r\n      },\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function isEmptyObject(x: any): boolean {\r\n  if (Array.isArray(x)) {\r\n    return !x.length;\r\n  }\r\n\r\n  if (x && x.toNumber) {\r\n    return x.toNumber() === 0;\r\n  }\r\n\r\n  return !x;\r\n}\r\n"],"names":[],"mappings":"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"}