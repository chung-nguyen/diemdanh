#!/usr/bin/env node

try {
  new TextDecoder('ascii');
} catch {
  const TD = globalThis.TextDecoder;
  globalThis.TextDecoder = class {
    constructor(encoding, options) {
      this.td = encoding === 'ascii' ? null : new TD(encoding, options);
    }

    decode(input, options) {
      if (this.td) return this.td.decode(input, options);
      let r = '';
      for (let i = 0; i < input.length; i++) r += String.fromCharCode(input[i]);
      return r;
    }
  };
}

/**
 * Module dependencies.
 */

require('dotenv').config();

var fs = require('fs');
var app = require('../app');
var https = require('https');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// Read SSL cert and key
// const sslOptions = {
//   key: fs.readFileSync('key.pem'),
//   cert: fs.readFileSync('cert.pem'),
// };

// Start HTTPS server
// var server = https.createServer(sslOptions, app);
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0');
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.info('Listening on ' + bind);
}
